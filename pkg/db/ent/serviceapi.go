// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/api-manager/pkg/db/ent/serviceapi"
	"github.com/google/uuid"
)

// ServiceAPI is the model entity for the ServiceAPI schema.
type ServiceAPI struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []string `json:"domains,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// MethodName holds the value of the "method_name" field.
	MethodName string `json:"method_name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Exported holds the value of the "exported" field.
	Exported bool `json:"exported,omitempty"`
	// PathPrefix holds the value of the "path_prefix" field.
	PathPrefix string `json:"path_prefix,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceAPI) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceapi.FieldDomains:
			values[i] = new([]byte)
		case serviceapi.FieldExported:
			values[i] = new(sql.NullBool)
		case serviceapi.FieldCreateAt, serviceapi.FieldUpdateAt, serviceapi.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case serviceapi.FieldProtocol, serviceapi.FieldServiceName, serviceapi.FieldMethod, serviceapi.FieldMethodName, serviceapi.FieldPath, serviceapi.FieldPathPrefix:
			values[i] = new(sql.NullString)
		case serviceapi.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceAPI", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceAPI fields.
func (sa *ServiceAPI) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceapi.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sa.ID = *value
			}
		case serviceapi.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				sa.Protocol = value.String
			}
		case serviceapi.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				sa.ServiceName = value.String
			}
		case serviceapi.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sa.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case serviceapi.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				sa.Method = value.String
			}
		case serviceapi.FieldMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method_name", values[i])
			} else if value.Valid {
				sa.MethodName = value.String
			}
		case serviceapi.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				sa.Path = value.String
			}
		case serviceapi.FieldExported:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field exported", values[i])
			} else if value.Valid {
				sa.Exported = value.Bool
			}
		case serviceapi.FieldPathPrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path_prefix", values[i])
			} else if value.Valid {
				sa.PathPrefix = value.String
			}
		case serviceapi.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				sa.CreateAt = uint32(value.Int64)
			}
		case serviceapi.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				sa.UpdateAt = uint32(value.Int64)
			}
		case serviceapi.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				sa.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ServiceAPI.
// Note that you need to call ServiceAPI.Unwrap() before calling this method if this ServiceAPI
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *ServiceAPI) Update() *ServiceAPIUpdateOne {
	return (&ServiceAPIClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the ServiceAPI entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *ServiceAPI) Unwrap() *ServiceAPI {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceAPI is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *ServiceAPI) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceAPI(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("protocol=")
	builder.WriteString(sa.Protocol)
	builder.WriteString(", ")
	builder.WriteString("service_name=")
	builder.WriteString(sa.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", sa.Domains))
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(sa.Method)
	builder.WriteString(", ")
	builder.WriteString("method_name=")
	builder.WriteString(sa.MethodName)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(sa.Path)
	builder.WriteString(", ")
	builder.WriteString("exported=")
	builder.WriteString(fmt.Sprintf("%v", sa.Exported))
	builder.WriteString(", ")
	builder.WriteString("path_prefix=")
	builder.WriteString(sa.PathPrefix)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", sa.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceAPIs is a parsable slice of ServiceAPI.
type ServiceAPIs []*ServiceAPI

func (sa ServiceAPIs) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
